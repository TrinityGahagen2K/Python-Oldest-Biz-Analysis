# -*- coding: utf-8 -*-
"""Oldest Businesses Exploratory Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iBqkkN0Ci-Mu_gB8HKzZbLh1kjp-b8J8

# Introduction
This project explores data of the oldest businesses in the world. The data was pulled by BusinessFinancing.co.uk, and was compiled into several datasets:
 - businesses
 - countries
 - categories

The following code blocks will analyze and make insightful observations using this data.

# Imports
"""

from google.colab import drive
drive.mount('/content/gdrive')

"""First, we'll import pandas and all relevant datasets and convert them to DataFrames. Then, we'll examine the first few rows in each table to see what information each table holds."""

import pandas as pd

# Creates DataFrames
businesses = pd.read_csv('/content/gdrive/MyDrive/oldest_business_datasets/businesses.csv')
countries = pd.read_csv('/content/gdrive/MyDrive/oldest_business_datasets/countries.csv')
categories = pd.read_csv('/content/gdrive/MyDrive/oldest_business_datasets//categories.csv')

# Views first few rows of each DataFrame
print(businesses.head(),'\n')
print(countries.head(), '\n')
print(categories.head(), '\n')

"""# Exploration

The businesses table contains information on the business name and the year it was founded. Using this, we will find the oldest business in the world.
"""

# Sorts businesses based on year_founded
sorted_businesses = businesses.sort_values('year_founded')
sorted_businesses.head()

"""From the table above, we can see that Kongō Gumi is the oldest business in the world. Using the pandas merge function and the countries dataset, we will now find the oldest businesses in the North American continent."""

# Merges previously sorted business DataFrame with countries DataFrame to obtain descriptive table
businesses_countries = sorted_businesses.merge(countries)

# Filters for businesses in North America
north_american_businesses = businesses_countries[businesses_countries['continent'] == 'North America']
north_american_businesses.head()

"""Here we find that the oldest business in North America is La Casa de Moneda de México. We can extend this and find the oldest business from each continent."""

# Creates table which only lists continent and oldest year founded
continent = businesses_countries.pivot_table(values='year_founded', index='continent', aggfunc=min)

# Merges this with businesses_countries table and subsets so only relevant information is shown
merged_continent = continent.merge(businesses_countries)

subset_merged_continent = merged_continent[['continent','country', 'business', 'year_founded']]
subset_merged_continent

"""Some countries have no records of their oldest business. Thus, the businesses table will have no records from those countries. However, the countries table lists all countries in the world, so we will use that to find out which countries have no records of an oldest business."""

# Merges businesses table with countries table
all_countries = businesses.merge(countries, how='outer')

# Filters to include only countries without oldest businesses
missing_countries = all_countries[all_countries['business'].isna()]

# Creates a series of the country names with missing oldest business data and display
missing_countries_series = missing_countries['country']
missing_countries_series

"""Since there is some missing information in this dataset, new data has been compiled to fill in some of these gaps. This was compiled into the file "new_businessses.csv". It is structured in the same way as the original businesses dataset."""

new_businesses = pd.read_csv('/content/gdrive/MyDrive/oldest_business_datasets/new_businesses.csv')

# Appends new business data to original business data
all_businesses = pd.concat([new_businesses, businesses])

# Merges/filters to find countries with missing business data
# Then counts number of countries missing business data for each continent
new_all_countries = all_businesses.merge(countries, how='outer')
new_missing_countries = new_all_countries[new_all_countries['business'].isna()]

count_missing = new_missing_countries.groupby('continent').agg({'country':'count'})
count_missing.columns = ['count_missing']
count_missing

"""We will continue to extend our exploration to the categories table, in which we will find how many of the oldest businesses are in each category of industry, as well as the cumulative number of years the businesses in each category have been operating.


"""

businesses_categories = all_businesses.merge(categories)

# Creates DataFrame listing number of oldest businesses in each category
count_business_cats = businesses_categories.groupby('category').agg({'business':'count'})

# Creates DataFrame listing cumulative years that businesses from each category have been operating
cumulative_years_businesses = businesses_categories.copy()
cumulative_years_businesses['years_in_business'] = businesses_categories['year_founded'].agg(lambda x: 2022 - x) # Number of years since founding
years_business_cats = cumulative_years_businesses.groupby('category').agg({'years_in_business':'sum'})

count_business_cats.columns = ['count']
years_business_cats.columns = ['total_years_in_business']
display(count_business_cats.head(), years_business_cats.head())

"""According to the tables above, Banking and Finance businesses have the most number of oldest businesses, as well as the highest cumulative nuber of years in operation.
Regarding Cafés, Restaurants and Bars, we can find the businesses in said category that were founded before 1800.
"""

# Queries number of cafés, restaurants, and bars founded before 1800
old_restaurants = businesses_categories.query('category_code == "CAT4" and year_founded < 1800')

# Sorts DataFrame
old_restaurants = old_restaurants.sort_values('year_founded')
old_restaurants

"""The oldest business in this category, as illustrated above, is St. Peter Stifts Kulinarium. Finally, we will finish the exploration of the dataset by finding the year the oldest business was founded in each category, grouped by continent."""

# Merges all businesses, countries, and categories together and sorts by year founded
businesses_categories_countries = all_businesses.merge(categories).merge(countries)
businesses_categories_countries = businesses_categories_countries.sort_values('year_founded')

# Creates DataFrame of oldest businesses grouped by continent and category
oldest_by_continent_category = businesses_categories_countries.groupby(['continent','category']).agg({'year_founded':'min'})
oldest_by_continent_category